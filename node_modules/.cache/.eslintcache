[{"/Users/schnee/project/react-redux-base/src/index.tsx":"1","/Users/schnee/project/react-redux-base/src/components/theme.ts":"2","/Users/schnee/project/react-redux-base/src/App.tsx":"3","/Users/schnee/project/react-redux-base/src/reducers/index.tsx":"4","/Users/schnee/project/react-redux-base/src/reducers/themeReducer.ts":"5","/Users/schnee/project/react-redux-base/src/reducers/ipInfoReducer.ts":"6","/Users/schnee/project/react-redux-base/src/reducers/loginReducer.ts":"7","/Users/schnee/project/react-redux-base/src/components/header.tsx":"8","/Users/schnee/project/react-redux-base/src/components/notfound.tsx":"9","/Users/schnee/project/react-redux-base/src/pages/login/index.ts":"10","/Users/schnee/project/react-redux-base/src/pages/tab1/index.ts":"11","/Users/schnee/project/react-redux-base/src/pages/tab3/index.ts":"12","/Users/schnee/project/react-redux-base/src/pages/tab2/index.ts":"13","/Users/schnee/project/react-redux-base/src/actions/type.ts":"14","/Users/schnee/project/react-redux-base/src/pages/tab1/Tab1.tsx":"15","/Users/schnee/project/react-redux-base/src/pages/tab3/Tab3.tsx":"16","/Users/schnee/project/react-redux-base/src/pages/login/LoginPage.tsx":"17","/Users/schnee/project/react-redux-base/src/pages/tab2/Tab2.tsx":"18","/Users/schnee/project/react-redux-base/src/actions/tab1Action.ts":"19","/Users/schnee/project/react-redux-base/src/apis/httpRequest.ts":"20"},{"size":998,"mtime":1641345108000,"results":"21","hashOfConfig":"22"},{"size":227,"mtime":1641345813000,"results":"23","hashOfConfig":"22"},{"size":1051,"mtime":1641518704000,"results":"24","hashOfConfig":"22"},{"size":448,"mtime":1641519140000,"results":"25","hashOfConfig":"22"},{"size":1980,"mtime":1641345108000,"results":"26","hashOfConfig":"22"},{"size":249,"mtime":1641519139000,"results":"27","hashOfConfig":"22"},{"size":287,"mtime":1641518735000,"results":"28","hashOfConfig":"22"},{"size":7197,"mtime":1641346241000,"results":"29","hashOfConfig":"22"},{"size":1424,"mtime":1641519156000,"results":"30","hashOfConfig":"22"},{"size":39,"mtime":1641345403000,"results":"31","hashOfConfig":"22"},{"size":34,"mtime":1641518274000,"results":"32","hashOfConfig":"22"},{"size":34,"mtime":1641518687000,"results":"33","hashOfConfig":"22"},{"size":34,"mtime":1641518685000,"results":"34","hashOfConfig":"22"},{"size":104,"mtime":1641519071000,"results":"35","hashOfConfig":"22"},{"size":2602,"mtime":1641519907000,"results":"36","hashOfConfig":"22"},{"size":1657,"mtime":1641518503000,"results":"37","hashOfConfig":"22"},{"size":18776,"mtime":1641519917000,"results":"38","hashOfConfig":"22"},{"size":1657,"mtime":1641518499000,"results":"39","hashOfConfig":"22"},{"size":282,"mtime":1641519828000,"results":"40","hashOfConfig":"22"},{"size":245,"mtime":1641519548000,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ayvbnk",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/schnee/project/react-redux-base/src/index.tsx",[],"/Users/schnee/project/react-redux-base/src/components/theme.ts",[],"/Users/schnee/project/react-redux-base/src/App.tsx",[],"/Users/schnee/project/react-redux-base/src/reducers/index.tsx",[],"/Users/schnee/project/react-redux-base/src/reducers/themeReducer.ts",[],"/Users/schnee/project/react-redux-base/src/reducers/ipInfoReducer.ts",[],"/Users/schnee/project/react-redux-base/src/reducers/loginReducer.ts",[],"/Users/schnee/project/react-redux-base/src/components/header.tsx",[],"/Users/schnee/project/react-redux-base/src/components/notfound.tsx",["87","88","89","90","91"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory } from \"react-router-dom\";\nimport {\n    Grid,\n} from '@material-ui/core';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport _ from 'lodash'\n\ninterface Props {\n    children: JSX.Element | JSX.Element[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        main: {\n            display: 'flex',\n            width: '100%',\n            height: '100vh',\n            backgroundColor: '#f5f5f5'\n        },\n        mainContainer: {\n            borderRadius:10,\n            padding: '40px 50px',\n            height: '570px',\n            width: '500px',\n            backgroundColor: '#FFF',\n            boxShadow: '0px 0px 20px rgba(0, 115, 250, 0.1)'\n        }\n    })\n);\n\n\nconst Notfound = (props:Props) :React.ReactElement<Props>  =>  {\n\n    const classes = useStyles()\n\n    //change route (history.push('/'))\n    const history = useHistory()\n    \n    //using redux \n    const dispatch = useDispatch()\n\n    return (\n    <Grid container direction='column' justifyContent='center' alignItems='center' className={classes.main}>\n        <Grid container direction='column' justifyContent='space-between' alignItems='center' className={classes.mainContainer}>\n            {'This is 404 not found page'}\n        </Grid>\n    </Grid>\n\n    )\n}\n\nexport default Notfound","/Users/schnee/project/react-redux-base/src/pages/login/index.ts",[],"/Users/schnee/project/react-redux-base/src/pages/tab1/index.ts",[],"/Users/schnee/project/react-redux-base/src/pages/tab3/index.ts",[],"/Users/schnee/project/react-redux-base/src/pages/tab2/index.ts",[],"/Users/schnee/project/react-redux-base/src/actions/type.ts",[],"/Users/schnee/project/react-redux-base/src/pages/tab1/Tab1.tsx",["92","93","94","95"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory } from \"react-router-dom\";\nimport { RootState } from '../../reducers/index'\nimport {\n    Divider,\n    Grid, Typography,\n} from '@material-ui/core';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport _ from 'lodash'\nimport { fetchIpInfo } from '../../actions/tab1Action';\ninterface Props {\n    children: JSX.Element | JSX.Element[];\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        main: {\n            display: 'flex',\n            width: '100%',\n            height: '100vh',\n            backgroundColor: '#f5f5f5'\n        },\n        mainContainer: {\n            borderRadius:10,\n            padding: '40px 50px',\n            height: '570px',\n            width: '40%',\n            backgroundColor: '#FFF',\n            boxShadow: '0px 0px 20px rgba(0, 115, 250, 0.1)'\n        }\n    })\n);\n\n\nconst Tab1 = (props:Props) :React.ReactElement<Props>  =>  {\n\n    const classes = useStyles()\n\n    //change route (history.push('/'))\n    const history = useHistory()\n\n    //get theme\n    const theme: {[key: string]: {[key: string]:string}}  = useSelector((state: RootState) => state.theme)\n    const themeSelected: string = useSelector((state: RootState) => state.themeSelected)\n    \n    //using redux \n    const dispatch = useDispatch()\n\n    //using selector to retreive store \n    const ipInfo: any = useSelector((state: RootState) => state.ipInfo)\n    \n    //get ip info when first loading\n    useEffect(() =>\n    {\n        dispatch(fetchIpInfo())\n    },[])\n\n    return (\n        <Grid container direction='column' justifyContent='center' alignItems='center' className={classes.main}>\n            <Grid container direction='column'  alignItems='flex-start' className={classes.mainContainer}>\n                <Grid item >\n                    <Typography> {'Request https://api.db-ip.com/v2/free/self to get self ip address.'} </Typography>   \n                </Grid>\n                <Divider style={{ width: '100%',marginTop:'20px' }}/>\n                <Grid item style={{marginTop:'20px'}}>\n                    <Typography> {'Response info: '} </Typography>   \n                </Grid>\n   \n                <Grid item style={{ marginTop: '20px' }}>\n                    {\n                        _.isEmpty(ipInfo) === false ? <Typography> {`Ip addrss: ${ipInfo}`} </Typography> : <Typography> {`Loading...`} </Typography>\n                    }  \n                </Grid>\n            </Grid>\n        </Grid>\n\n    )\n}\n\nexport default Tab1","/Users/schnee/project/react-redux-base/src/pages/tab3/Tab3.tsx",["96","97","98","99","100","101"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory } from \"react-router-dom\";\nimport { RootState } from '../../reducers/index'\nimport {\n    Grid,\n} from '@material-ui/core';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport _ from 'lodash'\ninterface Props {\n    children: JSX.Element | JSX.Element[];\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        main: {\n            display: 'flex',\n            width: '100%',\n            height: '100vh',\n            backgroundColor: '#f5f5f5'\n        },\n        mainContainer: {\n            borderRadius:10,\n            padding: '40px 50px',\n            height: '570px',\n            width: '500px',\n            backgroundColor: '#FFF',\n            boxShadow: '0px 0px 20px rgba(0, 115, 250, 0.1)'\n        }\n    })\n);\n\n\nconst Tab3 = (props:Props) :React.ReactElement<Props>  =>  {\n\n    const classes = useStyles()\n\n    //change route (history.push('/'))\n    const history = useHistory()\n\n    //get theme\n    const theme: {[key: string]: {[key: string]:string}}  = useSelector((state: RootState) => state.theme)\n    const themeSelected: string = useSelector((state: RootState) => state.themeSelected)\n    \n    //using redux \n    const dispatch = useDispatch()\n\n\n    return (\n    <Grid container direction='column' justifyContent='center' alignItems='center' className={classes.main}>\n        <Grid container direction='column' justifyContent='space-between' alignItems='center' className={classes.mainContainer}>\n            {'Tab3'}\n        </Grid>\n    </Grid>\n\n    )\n}\n\nexport default Tab3","/Users/schnee/project/react-redux-base/src/pages/login/LoginPage.tsx",["102","103","104","105","106","107"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory } from \"react-router-dom\";\nimport { RootState } from '../../reducers/index'\nimport {\n    Grid,\n    Button,\n    TextField,\n    InputAdornment,\n    Typography\n} from '@material-ui/core';\n\nimport { Checkbox } from '@mui/material';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport _ from 'lodash'\nimport EmailIcon from '@mui/icons-material/Email';\nimport LockOpenIcon from '@mui/icons-material/LockOpen';\n\ninterface Props {\n    children: JSX.Element | JSX.Element[];\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        main: {\n            display: 'flex',\n            width: '100%',\n            height: '100vh',\n            backgroundColor: '#f5f5f5'\n        },\n        mainContainer: {\n            borderRadius:10,\n            padding: '40px 50px',\n            height: '570px',\n            width: '500px',\n            backgroundColor: '#FFF',\n            boxShadow: '0px 0px 20px rgba(0, 115, 250, 0.1)'\n        },\n        loginWord: {\n            fontSize:'30px',\n            color:'#C17767',\n            fontWeight: 800,\n            fontFamily:'Lato, Noto Sans TC'\n        },\n        h1: {\n            fontSize:'14px',\n            color:'#9e9e9e',\n            fontWeight: 800,\n            fontFamily:'Lato, Noto Sans TC'\n        },\n        serachInput: {\n            [`& fieldset`]: {\n                borderRadius: 5,\n            },\n        },\n        selectBorder:{\n            borderColor: \"transparent !important\"\n        },\n        changeButton: {\n            borderRadius:5,\n            color:'#FFF',\n            backgroundColor: '#5A91FF',\n            width:'100%',\n            height:'40px',\n            boxShadow:'none',\n            '&:hover': {\n                backgroundColor:'#5A91FF',\n                boxShadow:'none'\n            },\n        },\n    })\n);\n\n\nconst LoginPage = (props:Props) :React.ReactElement<Props>  =>  {\n\n    const classes = useStyles()\n    const history = useHistory()\n    const theme: {[key: string]: {[key: string]:string}}  = useSelector((state: RootState) => state.theme)\n    const themeSelected :string = useSelector((state: RootState) => state.themeSelected)\n    const dispatch = useDispatch()\n\n    const changePassword = (password:string, confirmPassword:string) =>\n    {\n        //dispatch()\n        console.log(password, confirmPassword)\n        \n    }\n\n    const [password, setPassword] = React.useState<string>('');\n    const [email, setEmail] = React.useState<string>('');\n    const [passwordError, setPasswordError] = React.useState<boolean>(false);\n    const [emailError, setEmailError] = React.useState<boolean>(false);\n    const [showPassword, setShowPassword] = React.useState<boolean>(false);\n    const [needResetPassword, setNeedResetPassword] = React.useState<boolean>(false);\n\n    //confirm page\n    const [resetPassword, setResetPassword] = React.useState<string>('');\n    const [resetConfirmPassword, setResetConfirmPassword] = React.useState<string>('');\n    const [resetPasswordError, setResetPasswordError] = React.useState<boolean>(false);\n    const [resetConfirmPasswordError, setResetConfirmPasswordError] = React.useState<boolean>(false);\n\n    const emailEvent = (email: string) =>\n    {\n        if (email.length === 0)\n        {\n            setEmailError(false)\n        }\n        else if ( validateEmail(email) === null)\n        {\n            setEmailError(true)\n        }\n        else\n        {\n            setEmailError(false)\n        }\n        setEmail(email)\n    }\n\n    const passwordEvent = (password: string) =>\n    {\n        if (password.length === 0)\n        {\n            setPasswordError(false)\n        }\n        setPassword(password)\n    }\n\n    const validateEmail = (email:string) => {\n        return String(email)\n            .toLowerCase()\n            .match(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n            );\n    };\n\n    const resetPasswordEvent = (password:string, confirmPassword: string) =>\n    {\n        if (password.length === 0)\n        {\n            setResetPasswordError(false)\n        }\n        else if (password.length < 8)\n        {\n            setResetPasswordError(true)\n        }\n        else\n        {\n            setResetPasswordError(false)\n        }\n\n        if(_.isEqual(password, confirmPassword) === false)\n        {\n            setResetConfirmPasswordError(true)\n        }\n\n            setResetPassword(password)\n        }\n    \n    const comfirmPasswordEvent = (password:string, confirmPassword: string) =>\n    {\n        if (confirmPassword.length === 0)\n        {\n            setResetConfirmPasswordError(false)\n        }\n        else if (_.isEqual(password, confirmPassword) === false)\n        {\n            setResetConfirmPasswordError(true)\n        }\n        else\n        {\n            setResetConfirmPasswordError(false)\n        }\n        setResetConfirmPassword(confirmPassword)\n    }\n    \n\n    return (\n        <>\n            {needResetPassword === false ? \n                <Grid container direction='column' justifyContent='center' alignItems='center' className={classes.main}>\n                    <Grid container direction='column' justifyContent='space-between' alignItems='center' className={classes.mainContainer}>\n                        <Grid item style={{width:'100%'}}>\n                            <Grid container direction='column' alignItems='center' >\n                                <Grid item>\n                                    <Typography style={{fontFamily:'Noto sans', fontSize:'28px',fontWeight:600}}>{'Sign in'}</Typography>\n                                </Grid>\n                                <Grid item style={{marginTop:'10px'}}>\n                                    <Typography  style={{fontFamily:'Noto sans', fontSize:'16px',fontWeight:500,color:'#989898'}}>{'Enter your credentials to access your account.'}</Typography>\n                                </Grid>\n                                <Grid item container direction='column' style={{marginTop:'20px',width:'100%'}}>\n                                    <Grid item>\n                                        <Typography style={{fontFamily:'Noto sans', fontSize:'16px',fontWeight:600}}>{'Email address'}</Typography>\n                                    </Grid>\n                                    <Grid item style={{marginTop:'4px'}}>\n                                        <TextField\n                                            error={emailError}\n                                            value={email}\n                                            onChange={(event)=> emailEvent(event.target.value)}    \n                                            placeholder='Enter your email'\n                                            variant={'outlined'}\n                                            className={classes.serachInput}\n                                            InputProps={{\n                                                type: 'input',\n                                                style: {\n                                                    height:'40px',\n                                                    fontSize:'14px',\n                                                    width:'400px',\n                                                    padding:'0px 0px 0px 10px',\n                                                    backgroundColor:'#F3F3F3',\n                                                    marginRight: '20px',\n                                                    fontFamily:'Noto sans'\n                                                },\n                                                classes: {\n                                                    notchedOutline: classes.selectBorder\n                                                },\n                                                startAdornment: (\n                                                    <InputAdornment position=\"start\">\n                                                        <EmailIcon style={{fill:'#5A91FF'}}/>\n                                                    </InputAdornment>\n                                                )\n                                            }}\n                                            size=\"small\"\n                                            />\n                                    </Grid>\n                                        {emailError ?\n                                            <Typography  style={{marginTop:'4px',color:'#FE2D53', fontFamily:'Noto sans', fontSize:'14px'}}>{'Please enter the correct mail format.'}</Typography> : ''}\n                                </Grid>    \n                                <Grid item container direction='column' style={{marginTop:'10px'}}>\n                                    <Grid item>\n                                        <Typography  style={{fontFamily:'Noto sans', fontSize:'16px',fontWeight:600}}>{'Password'}</Typography>\n                                    </Grid>\n                                    <Grid item style={{marginTop:'4px'}}>\n                                        <TextField\n                                            error={passwordError}\n                                            value={password}\n                                            onChange={(event)=> passwordEvent(event.target.value)}    \n                                            placeholder='Enter your password'\n                                            variant={'outlined'}\n                                            className={classes.serachInput}\n                                            InputProps={{\n                                                type: showPassword? 'input' : 'password',\n                                                style: {\n                                                    height:'40px',\n                                                    fontSize:'14px',\n                                                    width:'400px',\n                                                    padding:'0px 0px 0px 10px',\n                                                    backgroundColor:'#F3F3F3',\n                                                    marginRight: '20px',\n                                                    fontFamily:'Noto sans'\n                                                },\n                                                classes: {\n                                                    notchedOutline: classes.selectBorder\n                                                },\n                                                startAdornment: (\n                                                    <InputAdornment position=\"start\">\n                                                        <LockOpenIcon style={{fill:'#5A91FF'}}/>\n                                                    </InputAdornment>\n                                                )\n                                            }}\n                                            size=\"small\"\n                                        />\n                                    </Grid>    \n                                        {passwordError ?\n                                        <Typography style={{color:'#FE2D53', fontFamily:'Noto sans', fontSize:'14px'}}>{ \"Wrong password.\"}</Typography> : ''}\n                                </Grid>    \n                                <Grid item container alignItems='center'>\n                                    <Checkbox sx={{\n                                            '&:hover': { bgcolor: 'transparent' },\n                                            marginLeft:'-10px'\n                                    }}\n                                        onChange={()=> setShowPassword(!showPassword)}\n                                        disableRipple/>\n                                    <Typography style={{fontSize:'16px', fontFamily:'Noto sans'}}>{'Show password'}</Typography>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item style={{width:'100%'}}>\n                                <Button onClick={()=> history.push('/tab1')}  className={classes.changeButton}>{'Sign in'}</Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                :\n                <Grid container direction='column' justifyContent='center' alignItems='center' className={classes.main}>\n                    <Grid container direction='column' justifyContent='space-between' alignItems='center' className={classes.mainContainer}>\n                        <Grid item style={{width:'100%'}}>\n                            <Grid container direction='column' alignItems='center'>\n                                <Grid item>\n                                    <Typography style={{fontFamily:'Noto sans', fontSize:'28px',fontWeight:600}}>{'Resetting password'}</Typography>\n                                </Grid>\n                                <Grid item style={{marginTop:'10px'}}>\n                                    <Typography  style={{fontFamily:'Noto sans', fontSize:'16px',fontWeight:500,color:'#989898'}}>{'Please reset your password.'}</Typography>\n                                </Grid>\n                                <Grid item container direction='column' style={{marginTop:'20px',width:'100%'}}>\n                                    <Grid item>\n                                        <Typography style={{fontFamily:'Noto sans', fontSize:'16px',fontWeight:600}}>{'New password'}</Typography>\n                                    </Grid>\n                                    <Grid item style={{marginTop:'4px'}}>\n                                        <TextField\n                                            error={resetPasswordError}\n                                            value={resetPassword}\n                                            onChange={(event)=> resetPasswordEvent(event.target.value, resetConfirmPassword)}    \n                                            placeholder='Please enter a password'\n                                            variant={'outlined'}\n                                            className={classes.serachInput}\n                                            InputProps={{\n                                                type: 'password',\n                                                style: {\n                                                    height:'40px',\n                                                    fontSize:'14px',\n                                                    width:'400px',\n                                                    padding:'0px 0px 0px 5px',\n                                                    backgroundColor:'#F3F3F3',\n                                                    marginRight: '20px',\n                                                    fontFamily:'Noto sans'\n                                                },\n                                                classes: {\n                                                    notchedOutline: classes.selectBorder\n                                                }\n                                            }}\n                                            size=\"small\"\n                                            />\n                                    </Grid>\n                                        {passwordError ?\n                                            <Typography  style={{marginTop:'4px',color:'#FE2D53', fontFamily:'Noto sans', fontSize:'14px'}}>{'The password must be at least 8 characters long.'}</Typography> : ''}\n                                </Grid>    \n                                <Grid item container direction='column' style={{marginTop:'10px'}}>\n                                    <Grid item>\n                                        <Typography  style={{fontFamily:'Noto sans', fontSize:'16px',fontWeight:600}}>{'Comfirm password'}</Typography>\n                                    </Grid>\n                                    <Grid item style={{marginTop:'4px'}}>\n                                        <TextField\n                                            error={resetConfirmPasswordError}\n                                            value={resetConfirmPassword}\n                                            onChange={(event)=> comfirmPasswordEvent(resetPassword, event.target.value)}    \n                                            placeholder='Please re-type the password to confirm'\n                                            variant={'outlined'}\n                                            className={classes.serachInput}\n                                            InputProps={{\n                                                type: 'password',\n                                                style: {\n                                                    height:'40px',\n                                                    fontSize:'14px',\n                                                    width:'400px',\n                                                    padding:'0px 0px 0px 5px',\n                                                    backgroundColor:'#F3F3F3',\n                                                    marginRight: '20px',\n                                                    fontFamily:'Noto sans'\n                                                },\n                                                classes: {\n                                                    notchedOutline: classes.selectBorder\n                                                }\n                                            }}\n                                            size=\"small\"\n                                        />\n                                    </Grid>    \n                                        {resetConfirmPasswordError ?\n                                        <Typography style={{color:'#FE2D53', fontFamily:'Noto sans', fontSize:'14px'}}>{ \"New password and confirm password doesn't match.\"}</Typography> : ''}\n                                </Grid>    \n                            </Grid>\n                        </Grid>\n                        <Grid item style={{width:'100%'}}>\n                            <Button disabled={resetPasswordError || resetConfirmPasswordError || resetPassword.length === 0 || resetConfirmPassword.length === 0 } onClick={()=> console.log('hi')} className={classes.changeButton}>{'Confirm'}</Button>\n                        </Grid>\n                    </Grid>\n            </Grid>\n            }\n\n        </>\n\n    )\n}\n\nexport default LoginPage","/Users/schnee/project/react-redux-base/src/pages/tab2/Tab2.tsx",["108","109","110","111","112","113"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory } from \"react-router-dom\";\nimport { RootState } from '../../reducers/index'\nimport {\n    Grid,\n} from '@material-ui/core';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport _ from 'lodash'\ninterface Props {\n    children: JSX.Element | JSX.Element[];\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        main: {\n            display: 'flex',\n            width: '100%',\n            height: '100vh',\n            backgroundColor: '#f5f5f5'\n        },\n        mainContainer: {\n            borderRadius:10,\n            padding: '40px 50px',\n            height: '570px',\n            width: '500px',\n            backgroundColor: '#FFF',\n            boxShadow: '0px 0px 20px rgba(0, 115, 250, 0.1)'\n        }\n    })\n);\n\n\nconst Tab2 = (props:Props) :React.ReactElement<Props>  =>  {\n\n    const classes = useStyles()\n\n    //change route (history.push('/'))\n    const history = useHistory()\n\n    //get theme\n    const theme: {[key: string]: {[key: string]:string}}  = useSelector((state: RootState) => state.theme)\n    const themeSelected: string = useSelector((state: RootState) => state.themeSelected)\n    \n    //using redux \n    const dispatch = useDispatch()\n\n\n    return (\n    <Grid container direction='column' justifyContent='center' alignItems='center' className={classes.main}>\n        <Grid container direction='column' justifyContent='space-between' alignItems='center' className={classes.mainContainer}>\n            {'Tab2'}\n        </Grid>\n    </Grid>\n\n    )\n}\n\nexport default Tab2","/Users/schnee/project/react-redux-base/src/actions/tab1Action.ts",[],"/Users/schnee/project/react-redux-base/src/apis/httpRequest.ts",[],{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"118","line":2,"column":10,"nodeType":"116","messageId":"117","endLine":2,"endColumn":21},{"ruleId":"114","severity":1,"message":"119","line":9,"column":8,"nodeType":"116","messageId":"117","endLine":9,"endColumn":9},{"ruleId":"114","severity":1,"message":"120","line":40,"column":11,"nodeType":"116","messageId":"117","endLine":40,"endColumn":18},{"ruleId":"114","severity":1,"message":"121","line":43,"column":11,"nodeType":"116","messageId":"117","endLine":43,"endColumn":19},{"ruleId":"114","severity":1,"message":"120","line":43,"column":11,"nodeType":"116","messageId":"117","endLine":43,"endColumn":18},{"ruleId":"114","severity":1,"message":"122","line":46,"column":11,"nodeType":"116","messageId":"117","endLine":46,"endColumn":57},{"ruleId":"114","severity":1,"message":"123","line":47,"column":11,"nodeType":"116","messageId":"117","endLine":47,"endColumn":32},{"ruleId":"124","severity":1,"message":"125","line":59,"column":7,"nodeType":"126","endLine":59,"endColumn":9,"suggestions":"127"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"119","line":10,"column":8,"nodeType":"116","messageId":"117","endLine":10,"endColumn":9},{"ruleId":"114","severity":1,"message":"120","line":41,"column":11,"nodeType":"116","messageId":"117","endLine":41,"endColumn":18},{"ruleId":"114","severity":1,"message":"122","line":44,"column":11,"nodeType":"116","messageId":"117","endLine":44,"endColumn":57},{"ruleId":"114","severity":1,"message":"123","line":45,"column":11,"nodeType":"116","messageId":"117","endLine":45,"endColumn":32},{"ruleId":"114","severity":1,"message":"121","line":48,"column":11,"nodeType":"116","messageId":"117","endLine":48,"endColumn":19},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"122","line":80,"column":11,"nodeType":"116","messageId":"117","endLine":80,"endColumn":57},{"ruleId":"114","severity":1,"message":"123","line":81,"column":11,"nodeType":"116","messageId":"117","endLine":81,"endColumn":32},{"ruleId":"114","severity":1,"message":"121","line":82,"column":11,"nodeType":"116","messageId":"117","endLine":82,"endColumn":19},{"ruleId":"114","severity":1,"message":"128","line":84,"column":11,"nodeType":"116","messageId":"117","endLine":84,"endColumn":25},{"ruleId":"114","severity":1,"message":"129","line":96,"column":31,"nodeType":"116","messageId":"117","endLine":96,"endColumn":51},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"119","line":10,"column":8,"nodeType":"116","messageId":"117","endLine":10,"endColumn":9},{"ruleId":"114","severity":1,"message":"120","line":41,"column":11,"nodeType":"116","messageId":"117","endLine":41,"endColumn":18},{"ruleId":"114","severity":1,"message":"122","line":44,"column":11,"nodeType":"116","messageId":"117","endLine":44,"endColumn":57},{"ruleId":"114","severity":1,"message":"123","line":45,"column":11,"nodeType":"116","messageId":"117","endLine":45,"endColumn":32},{"ruleId":"114","severity":1,"message":"121","line":48,"column":11,"nodeType":"116","messageId":"117","endLine":48,"endColumn":19},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'_' is defined but never used.","'history' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'theme' is assigned a value but never used.","'themeSelected' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["130"],"'changePassword' is assigned a value but never used.","'setNeedResetPassword' is assigned a value but never used.",{"desc":"131","fix":"132"},"Update the dependencies array to be: [dispatch]",{"range":"133","text":"134"},[1624,1626],"[dispatch]"]